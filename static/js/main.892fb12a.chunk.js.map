{"version":3,"sources":["jazzscript/jazzscript.constants.ts","jazzscript/jazzscript.ts","ItemPicker.tsx","ScalePicker.tsx","Keyboard.tsx","App.tsx","index.tsx"],"names":["Steps","notes","Map","majorScaleDegrees","Whole","Half","naturalMinorScaleDegrees","melodicMinorScaleDegrees","harmonicMinorScaleDegrees","lydianScaleDegrees","satieScaleDegrees","alteredScaleDegrees","dimDomScaleDegrees","dorianScaleDegrees","scales","audioContext","AudioContext","oscillator","createOscillator","type","start","gain","createGain","value","connect","filter","createBiquadFilter","getAvailableNotes","noteNames","forEach","key","push","getAvailableFrequencies","noteFrequencies","playSequence","frequencies","timePerNote","frequency","i","setValueAtTime","currentTime","linearRampToValueAtTime","getScaleTones","scale","allNotes","noteIndexes","scaleSteps","get","currentIndex","findIndex","note","startsWith","step","getNoteIndexesForScale","map","index","destination","ItemPicker","selected","itemName","setNewSelected","className","onClick","replace","slice","scaleNames","getAvailableScales","ScalePicker","keyCenter","setKeyCenter","setScale","currentNote","currentScale","Keyboard","selectedKey","quizzing","playSingleNote","quizState","keys","getKeyClass","isBlackKey","current","currentFrequency","quizScaleFrequencies","quizStep","includes","flashScreenColor","document","body","classList","add","setTimeout","remove","App","useState","setSelectedKey","setQuizState","setQuizzing","playCurrentScale","scaleTones","length","playScale","noteCount","interval","setInterval","clearInterval","noteIndex","useEffect","playNote","newState","correct","disabled","quizArr","undefined","quizCurrentScale","ReactDOM","render","StrictMode","getElementById"],"mappings":"gLA2BKA,E,sDA3BQC,G,MAAQ,IAAIC,IAAoB,CAC3C,CAAC,KAAM,KACP,CAAC,MAAO,QACR,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,KAAM,QACP,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,KAAM,KACP,CAAC,MAAO,OACR,CAAC,KAAM,KACP,CAAC,MAAO,QACR,CAAC,KAAM,QACP,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,KAAM,QACP,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,KAAM,KACP,CAAC,MAAO,QACR,CAAC,KAAM,Y,SAGJF,O,eAAAA,I,kBAAAA,M,KAKL,IAAMG,EAAkC,CACtCH,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,MAGFC,EAAyC,CAC7CN,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,OAGFG,EAAyC,CAC7CP,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,MAGFG,EAA0C,CAC9CR,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MAAQJ,EAAMK,KACpBL,EAAMK,MAGFI,EAAmC,CACvCT,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,MAGFK,EAAkC,CACtCV,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MAAQJ,EAAMK,KACpBL,EAAMK,KACNL,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,OAGFO,EAAoC,CACxCX,EAAMK,KACNL,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,OAGFQ,EAAmC,CACvCZ,EAAMK,KACNL,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMK,MAGFQ,EAAmC,CACvCb,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,MACNJ,EAAMI,MACNJ,EAAMI,MACNJ,EAAMK,KACNL,EAAMI,OAGKU,EAAS,IAAIZ,IAA2B,CACnD,CAAC,QAASC,GACV,CAAC,SAAUM,GACX,CAAC,eAAgBH,GACjB,CAAC,eAAgBC,GACjB,CAAC,gBAAiBC,GAClB,CAAC,SAAUK,GACX,CAAC,QAASH,GACV,CAAC,UAAWC,GACZ,CAAC,SAAUC,KC5HPG,EAAe,IAAIC,aACnBC,EAAaF,EAAaG,mBAChCD,EAAWE,KAAO,WAClBF,EAAWG,QACX,IAAMC,EAAON,EAAaO,aAC1BD,EAAKA,KAAKE,MAAQ,EAClBN,EAAWO,QAAQH,GACnB,IAAMI,EAASV,EAAaW,qBASrB,SAASC,IACd,IAAMC,EAA2B,GAEjC,OADA3B,EAAM4B,SAAQ,SAACN,EAAeO,GAAhB,OAAgCF,EAAUG,KAAKD,MACtDF,EAGF,SAASI,IACd,IAAMC,EAAiC,GAEvC,OADAhC,EAAM4B,SAAQ,SAACN,EAAeO,GAAhB,OAAgCG,EAAgBF,KAAKR,MAC5DU,EASF,SAASC,EACdC,EACAC,GAEA,OAAO,WACLD,EAAYN,SAAQ,SAACQ,EAAWC,GAC9BrB,EAAWoB,UAAUE,eACnBF,EACAtB,EAAayB,YAAcJ,EAAcE,GAE3CjB,EAAKA,KAAKoB,wBACR,GACA1B,EAAayB,YAAcJ,EAAcE,GAE3Cb,EAAOY,UAAUI,wBACf,KACA1B,EAAayB,YAAcJ,EAAcE,GAE3CjB,EAAKA,KAAKoB,wBACR,EACA1B,EAAayB,YAAcJ,GAAeE,EAAI,IAEhDb,EAAOY,UAAUI,wBACf,IACA1B,EAAayB,YAAcJ,GAAeE,EAAI,QAsB/C,SAASI,EAAcZ,EAAaa,GACzC,IAAMC,EAAWjB,IAKjB,OAtBF,SAAgCG,EAAaa,GAC3C,IAAME,EAA6B,GAC7BC,EAAahC,EAAOiC,IAAIJ,GAC9B,IAAKG,EACH,MAAO,GAET,IACIE,EADarB,IACWsB,WAAU,SAACC,GAAD,OAAUA,EAAKC,WAAWrB,MAMhE,OALAe,EAAYd,KAAKiB,GACjBF,EAAWjB,SAAQ,SAACuB,GAClBJ,GAAgBI,EAChBP,EAAYd,KAAKiB,MAEZH,EAKqBQ,CAAuBvB,EAAKa,GACnBW,KACnC,SAACC,GAAD,OAAWtD,EAAM8C,IAAIH,EAASW,OA5ElC9B,EAAOY,UAAUd,MAAQ,IACzBF,EAAKG,QAAQC,GACbA,EAAOD,QAAQT,EAAayC,aCGbC,MAZf,YAA8E,IAAxDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,eACpCC,EAAY,OAIhB,OAHIH,IACFG,GAAa,aAGb,yBAAKA,UAAWA,EAAWC,QAAS,kBAAMF,EAAeD,KACtDA,EAASI,QAAQ,OAAQ,IAAIA,QAAQ,YAAa,SCJnD9D,EAAQ0B,IAAoBqC,MAAM,EAAG,IACrClD,EFuBC,WACL,IAAMmD,EAA4B,GAElC,OADAnD,EAAOe,SAAQ,SAACN,EAAOO,GAAR,OAAgBmC,EAAWlC,KAAKD,MACxCmC,EE1BMC,GAkCAC,MAhCf,YAKsB,IAJpBC,EAImB,EAJnBA,UACAC,EAGmB,EAHnBA,aACA1B,EAEmB,EAFnBA,MACA2B,EACmB,EADnBA,SAEA,OACE,yBAAKT,UAAU,wBACb,yBAAKA,UAAU,SACZ5D,EAAMqD,KAAI,SAACiB,GAAD,OACT,kBAAC,EAAD,CACEzC,IAAKyC,EACLb,SAAUU,IAAcG,EACxBZ,SAAUY,EACVX,eAAgBS,QAItB,yBAAKR,UAAU,SACZ/C,EAAOwC,KAAI,SAACkB,GAAD,OACV,kBAAC,EAAD,CACE1C,IAAK0C,EACLd,SAAUc,IAAiB7B,EAC3BgB,SAAUa,EACVZ,eAAgBU,UC0BbG,MA9Cf,YAKmB,IAJjBC,EAIgB,EAJhBA,YACAC,EAGgB,EAHhBA,SACAC,EAEgB,EAFhBA,eACAC,EACgB,EADhBA,UAEMC,EAAO9C,IAEb,SAAS+C,EAAYxB,GACnB,IAAIM,EAAY,GAUhB,IA1BJ,SAAoBN,GAIlB,OAHIA,EAAQ,KACVA,GAAS,IAEHA,GAAS,GAAKA,EAAQ,IAAM,GAAOA,EAAQ,GAAKA,EAAQ,IAAM,EAchEyB,CAAWzB,GAGbM,GAAa,WAFbA,GAAa,WAIXa,IAAgBnB,IAClBM,GAAa,gBAEXc,EAAU,CACZ,IAAM3B,EAAe6B,EAAU5B,WAAU,SAACC,GAAD,OAA2B,IAAjBA,EAAK+B,WAClDC,EAAmBL,EAAU7B,GAAcX,UAC3C8C,EAAuBN,EAAUvB,KAAI,SAAA8B,GAAQ,OAAIA,EAAS/C,aAE9DyC,EAAKvB,GAAS2B,GACdC,EAAqBE,SAASP,EAAKvB,MAEnCM,GAAa,eAGjB,OAAOA,EAGT,OACE,yBAAKA,UAAU,YACZiB,EAAKxB,KAAI,SAACjB,EAAWC,GAAZ,OACR,yBACER,IAAKQ,EACLwB,QAAS,kBAAMc,EAAevC,IAC9BwB,UAAWkB,EAAYzC,UCvC3BH,EAAcH,IAEpB,SAASsD,EAAiBzB,GACxB0B,SAASC,KAAKC,UAAUC,IAAI7B,GAC5B8B,YAAW,WACTJ,SAASC,KAAKC,UAAUG,OAAO/B,KAC9B,KA8GUgC,MA3Gf,WAAgB,IAAD,EACqBC,mBAAS,MAD9B,mBACN1B,EADM,KACKC,EADL,OAEayB,mBAAS,SAFtB,mBAENnD,EAFM,KAEC2B,EAFD,OAGyBwB,oBAAU,GAHnC,mBAGNpB,EAHM,KAGOqB,EAHP,OAIqBD,mBAA0B,IAJ/C,mBAINjB,EAJM,KAIKmB,EAJL,OAKmBF,oBAAS,GAL5B,mBAKNnB,EALM,KAKIsB,EALJ,KAwCb,SAASC,IACP,IAAM1B,EAAe9B,EAAc0B,EAAWzB,GACxCuD,EJ2BH,SAAmBpE,EAAaa,GACrC,IAAMwD,EAAazD,EAAcZ,EAAKa,GACtC,OAAOT,EAAaiE,EAAY,IAAMA,EAAWC,QI7BtBC,CAAUjC,EAAWzB,GAC1C2D,EAAoB,EAClBC,EAAWC,aAAY,WAC3B,GAAkB,IAAdF,EACFG,cAAcF,GACdR,GAAgB,OACX,CACa,IAAdO,GACFJ,IAEF,IAAMQ,EAAYvE,EAAYc,WAC5B,SAACX,GAAD,OAAOA,IAAMkC,EAAa8B,MAE5BP,EAAeW,GACfJ,OAED,KAkBL,OArEAK,qBAAU,WACRV,GAAY,GACZD,EAAa,MACZ,CAAC5B,EAAWzB,IAmEb,yBAAKkB,UAAU,OACb,oDACA,kBAAC,EAAD,CACEO,UAAWA,EACXC,aAAcA,EACd1B,MAAOA,EACP2B,SAAUA,IAEZ,kBAAC,EAAD,CACEI,YAAaA,EACbC,SAAUA,EACVC,eA5EN,SAAwBvC,GAGtB,GAFiBH,EAAa,CAACG,GAAY,GAC3CuE,GACIjC,EAAU,CACZ,IAAM3B,EAAe6B,EAAU5B,WAAU,SAACC,GAAD,OAA2B,IAAjBA,EAAK+B,WACxD,GAAI5C,IAAcwC,EAAU7B,GAAcX,UAExC4D,GAAY,GACZD,EAAa,IACbV,EAAiB,kBACZ,CAEL,IAAMuB,EAAQ,YAAOhC,GACrBgC,EAAS7D,GAAciC,SAAU,EACjC4B,EAAS7D,GAAc8D,SAAU,EAC7BD,EAAS7D,EAAe,IAC1B6D,EAAS7D,EAAe,GAAGiC,SAAU,EACrCe,EAAaa,KAGbZ,GAAY,GACZD,EAAa,IACbV,EAAiB,kBAuDnBT,UAAWA,IAEb,yBAAKhB,UAAU,kBACb,4BACEA,UAAU,UACVkD,SAAUpC,EACVb,QAAS,kBAlCjB,WACE,IAAMU,EAAe9B,EAAc0B,EAAWzB,GACxCqE,EAA2B,GACjCxC,EAAa3C,SAAQ,SAACQ,GAAD,OACnB2E,EAAQjF,KAAK,CACXM,UAAWA,EACXyE,aAASG,EACThC,SAAS,OAGb+B,EAAQ,GAAG/B,SAAU,EACrBe,EAAagB,GACbf,GAAY,GAsBSiB,KAHjB,QAOA,4BAAQrD,UAAU,UAAUC,QAAS,kBAAMoC,MAA3C,WCzHRiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,U","file":"static/js/main.892fb12a.chunk.js","sourcesContent":["export const notes = new Map<string, number>([\n  [\"C4\", 261],\n  [\"C#4\", 277.18],\n  [\"D4\", 293.66],\n  [\"D#4\", 311.13],\n  [\"E4\", 329.63],\n  [\"F4\", 349.23],\n  [\"F#4\", 369.99],\n  [\"G4\", 392],\n  [\"G#4\", 415.3],\n  [\"A4\", 440],\n  [\"A#4\", 466.16],\n  [\"B4\", 493.88],\n  [\"C5\", 523.25],\n  [\"C#5\", 554.37],\n  [\"D5\", 587.33],\n  [\"D#5\", 622.25],\n  [\"E5\", 659.25],\n  [\"F5\", 698.46],\n  [\"F#5\", 739.99],\n  [\"G5\", 783.99],\n  [\"G#5\", 830.61],\n  [\"A5\", 880],\n  [\"A#5\", 932.33],\n  [\"B5\", 987.77],\n]);\n\nenum Steps {\n  Half = 1,\n  Whole = 2,\n}\n\nconst majorScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n];\n\nconst naturalMinorScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n];\n\nconst melodicMinorScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n];\n\nconst harmonicMinorScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole + Steps.Half,\n  Steps.Half,\n];\n\nconst lydianScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n];\n\nconst satieScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole + Steps.Half,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole\n]\n\nconst alteredScaleDegrees: Array<Steps> = [\n  Steps.Half,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n];\n\nconst dimDomScaleDegrees: Array<Steps> = [\n  Steps.Half,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Half\n]\n\nconst dorianScaleDegrees: Array<Steps> = [\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Whole,\n  Steps.Half,\n  Steps.Whole,\n];\n\nexport const scales = new Map<string, Array<number>>([\n  [\"Major\", majorScaleDegrees],\n  [\"Lydian\", lydianScaleDegrees],\n  [\"NaturalMinor\", naturalMinorScaleDegrees],\n  [\"MelodicMinor\", melodicMinorScaleDegrees],\n  [\"HarmonicMinor\", harmonicMinorScaleDegrees],\n  [\"Dorian\", dorianScaleDegrees],\n  [\"Satie\", satieScaleDegrees],\n  [\"Altered\", alteredScaleDegrees],\n  [\"DimDom\", dimDomScaleDegrees]\n]);\n","import { notes, scales } from \"./jazzscript.constants\";\n\ntype scaleAndPlayScale = {\n  scale: Array<number>;\n  playScale: Function;\n};\n\nconst audioContext = new AudioContext();\nconst oscillator = audioContext.createOscillator();\noscillator.type = \"sawtooth\";\noscillator.start();\nconst gain = audioContext.createGain();\ngain.gain.value = 0;\noscillator.connect(gain);\nconst filter = audioContext.createBiquadFilter();\nfilter.frequency.value = 1000;\ngain.connect(filter);\nfilter.connect(audioContext.destination);\n\nexport function getAudioContext(): AudioContext {\n  return audioContext;\n}\n\nexport function getAvailableNotes(): Array<string> {\n  const noteNames: Array<string> = [];\n  notes.forEach((value: number, key: string) => noteNames.push(key));\n  return noteNames;\n}\n\nexport function getAvailableFrequencies(): Array<number> {\n  const noteFrequencies: Array<number> = [];\n  notes.forEach((value: number, key: string) => noteFrequencies.push(value));\n  return noteFrequencies;\n}\n\nexport function getAvailableScales(): Array<string> {\n  const scaleNames: Array<string> = [];\n  scales.forEach((value, key) => scaleNames.push(key));\n  return scaleNames;\n}\n\nexport function playSequence(\n  frequencies: Array<number>,\n  timePerNote: number\n): Function {\n  return () => {\n    frequencies.forEach((frequency, i) => {\n      oscillator.frequency.setValueAtTime(\n        frequency,\n        audioContext.currentTime + timePerNote * i\n      );\n      gain.gain.linearRampToValueAtTime(\n        0.2,\n        audioContext.currentTime + timePerNote * i\n      );\n      filter.frequency.linearRampToValueAtTime(\n        1500,\n        audioContext.currentTime + timePerNote * i\n      );\n      gain.gain.linearRampToValueAtTime(\n        0,\n        audioContext.currentTime + timePerNote * (i + 1)\n      );\n      filter.frequency.linearRampToValueAtTime(\n        1000,\n        audioContext.currentTime + timePerNote * (i + 1)\n      );\n    });\n  };\n}\n\nfunction getNoteIndexesForScale(key: string, scale: string): Array<number> {\n  const noteIndexes: Array<number> = [];\n  const scaleSteps = scales.get(scale);\n  if (!scaleSteps) {\n    return [];\n  }\n  const allNotes = getAvailableNotes();\n  let currentIndex = allNotes.findIndex((note) => note.startsWith(key));\n  noteIndexes.push(currentIndex);\n  scaleSteps.forEach((step) => {\n    currentIndex += step;\n    noteIndexes.push(currentIndex);\n  });\n  return noteIndexes;\n}\n\nexport function getScaleTones(key: string, scale: string): Array<number> {\n  const allNotes = getAvailableNotes();\n  const noteIndexesForScale = getNoteIndexesForScale(key, scale);\n  let scaleTones = noteIndexesForScale.map(\n    (index) => notes.get(allNotes[index])!\n  );\n  return scaleTones;\n}\n\nexport function playScale(key: string, scale: string): Function {\n  const scaleTones = getScaleTones(key, scale);\n  return playSequence(scaleTones, 2.5 / scaleTones.length);\n}\n","import React from \"react\";\n\ntype ItemPickerProps = {\n  selected: boolean;\n  itemName: string;\n  setNewSelected: Function;\n};\n\nfunction ItemPicker({ selected, itemName, setNewSelected }: ItemPickerProps) {\n  let className = \"item\";\n  if (selected) {\n    className += \" selected\";\n  }\n  return (\n    <div className={className} onClick={() => setNewSelected(itemName)}>\n      {itemName.replace(/\\d+/g, \"\").replace(/([A-Z]+)/g, \" $1\")}\n    </div>\n  );\n}\n\nexport default ItemPicker;\n","import React from \"react\";\nimport { getAvailableNotes, getAvailableScales } from \"./jazzscript/jazzscript\";\nimport ItemPicker from \"./ItemPicker\";\n\ntype ScalePickerProps = {\n  keyCenter: string;\n  setKeyCenter: Function;\n  scale: string;\n  setScale: Function;\n};\n\nconst notes = getAvailableNotes().slice(0, 12);\nconst scales = getAvailableScales();\n\nfunction ScalePicker({\n  keyCenter,\n  setKeyCenter,\n  scale,\n  setScale,\n}: ScalePickerProps) {\n  return (\n    <div className=\"flexbox space-around\">\n      <div className=\"items\">\n        {notes.map((currentNote) => (\n          <ItemPicker\n            key={currentNote}\n            selected={keyCenter === currentNote}\n            itemName={currentNote}\n            setNewSelected={setKeyCenter}\n          />\n        ))}\n      </div>\n      <div className=\"items\">\n        {scales.map((currentScale) => (\n          <ItemPicker\n            key={currentScale}\n            selected={currentScale === scale}\n            itemName={currentScale}\n            setNewSelected={setScale}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ScalePicker;\n","import React from \"react\";\nimport { getAvailableFrequencies } from \"./jazzscript/jazzscript\";\nimport { QuizNote } from \"./App\";\n\ntype KeyboardProps = {\n  selectedKey: number;\n  quizzing: boolean;\n  playSingleNote: Function;\n  quizState: Array<QuizNote>;\n};\n\nfunction isBlackKey(index: number) {\n  if (index > 11) {\n    index -= 12;\n  }\n  return (index <= 4 && index % 2 !== 0) || (index > 4 && index % 2 === 0);\n}\n\nfunction Keyboard({\n  selectedKey,\n  quizzing,\n  playSingleNote,\n  quizState\n}: KeyboardProps) {\n  const keys = getAvailableFrequencies();\n\n  function getKeyClass(index: number): string {\n    let className = \"\";\n\n    if (isBlackKey(index)) {\n      className += \"blackKey\";\n    } else {\n      className += \"whiteKey\";\n    }\n    if (selectedKey === index) {\n      className += \" selectedKey\";\n    }\n    if (quizzing) {\n      const currentIndex = quizState.findIndex((note) => note.current === true);\n      const currentFrequency = quizState[currentIndex].frequency;\n      const quizScaleFrequencies = quizState.map(quizStep => quizStep.frequency);\n      if (\n        keys[index] < currentFrequency &&\n        quizScaleFrequencies.includes(keys[index])\n      ) {\n        className += \" successKey\";\n      }\n    }\n    return className;\n  }\n\n  return (\n    <div className=\"keyboard\">\n      {keys.map((frequency, i) => (\n        <div\n          key={i}\n          onClick={() => playSingleNote(frequency)}\n          className={getKeyClass(i)}\n        ></div>\n      ))}\n    </div>\n  );\n}\n\nexport default Keyboard;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"./ScalePicker\";\nimport {\n  playScale,\n  getAvailableFrequencies,\n  playSequence,\n  getScaleTones\n} from \"./jazzscript/jazzscript\";\nimport ScalePicker from \"./ScalePicker\";\nimport Keyboard from \"./Keyboard\";\n\nexport type QuizNote = {\n  frequency: number;\n  correct: boolean | undefined;\n  current: boolean;\n};\n\nconst frequencies = getAvailableFrequencies();\n\nfunction flashScreenColor(className: string) {\n  document.body.classList.add(className);\n  setTimeout(() => {\n    document.body.classList.remove(className);\n  }, 2000);\n}\n\nfunction App() {\n  const [keyCenter, setKeyCenter] = useState(\"C4\");\n  const [scale, setScale] = useState(\"Major\");\n  const [selectedKey, setSelectedKey] = useState(-1);\n  const [quizState, setQuizState] = useState<Array<QuizNote>>([]);\n  const [quizzing, setQuizzing] = useState(false);\n\n  useEffect(() => {\n    setQuizzing(false);\n    setQuizState([]);\n  }, [keyCenter, scale]);\n\n  function playSingleNote(frequency: number) {\n    const playNote = playSequence([frequency], 0.3);\n    playNote();\n    if (quizzing) {\n      const currentIndex = quizState.findIndex((note) => note.current === true);\n      if (frequency !== quizState[currentIndex].frequency) {\n        // wrong key, failed\n        setQuizzing(false);\n        setQuizState([]);\n        flashScreenColor('quizFailed');\n      } else {\n        // right key, advance the quiz to next note\n        const newState = [...quizState];\n        newState[currentIndex].current = false;\n        newState[currentIndex].correct = true;\n        if (newState[currentIndex + 1]) {\n          newState[currentIndex + 1].current = true;\n          setQuizState(newState);\n        } else {\n          // we don't have a next note, end of the quiz, passed\n          setQuizzing(false);\n          setQuizState([]);\n          flashScreenColor('quizPassed');\n        }\n      }\n    }\n  }\n\n  function playCurrentScale() {\n    const currentScale = getScaleTones(keyCenter, scale);\n    const playCurrentScale = playScale(keyCenter, scale);\n    let noteCount: number = 0;\n    const interval = setInterval(() => {\n      if (noteCount === 8) {\n        clearInterval(interval);\n        setSelectedKey(-1);\n      } else {\n        if (noteCount === 0) {\n          playCurrentScale();\n        }\n        const noteIndex = frequencies.findIndex(\n          (i) => i === currentScale[noteCount]\n        );\n        setSelectedKey(noteIndex);\n        noteCount++;\n      }\n    }, 312);\n  }\n\n  function quizCurrentScale() {\n    const currentScale = getScaleTones(keyCenter, scale);\n    const quizArr: Array<QuizNote> = [];\n    currentScale.forEach((frequency) =>\n      quizArr.push({\n        frequency: frequency,\n        correct: undefined,\n        current: false,\n      })\n    );\n    quizArr[0].current = true;\n    setQuizState(quizArr);\n    setQuizzing(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>practice your scales</h1>\n      <ScalePicker\n        keyCenter={keyCenter}\n        setKeyCenter={setKeyCenter}\n        scale={scale}\n        setScale={setScale}\n      />\n      <Keyboard\n        selectedKey={selectedKey}\n        quizzing={quizzing}\n        playSingleNote={playSingleNote}\n        quizState={quizState}\n      />\n      <div className=\"flexbox center\">\n        <button\n          className=\"quizBtn\"\n          disabled={quizzing}\n          onClick={() => quizCurrentScale()}\n        >\n          quiz\n        </button>\n        <button className=\"playBtn\" onClick={() => playCurrentScale()}>\n          play\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}